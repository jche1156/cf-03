---
const myDB = Astro.locals.runtime.env.DB;
type D1Result = import("@cloudflare/workers-types").D1Result;

export interface LumaEventResult {
  EventID: string;
  EventName: string;
  EventDatetime: string;
  EventFoodReport: string;
  EventCodingReport: string;
  EventPrizesReport: string;
}
const results: D1Result = await myDB
  .prepare("SELECT EventID, EventName, EventDatetime, EventFoodReport, EventCodingReport, EventPrizesReport FROM Events WHERE EventLocation='San Francisco, California' ORDER BY EventDatetime")
  .all();

// Cast the results to LumaEventResult[]
const events: LumaEventResult[] = results.results as LumaEventResult[];

function format_date(date: string): string {
  let dt = new Date(date);
  dt.setTime(dt.getTime() - 7 * 60 * 60 * 1000); // Adjusting for timezone if needed

  // Days of the week array
  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  // Format the components
  const dayOfWeek = days[dt.getUTCDay()];
  const month = (dt.getUTCMonth() + 1).toString().padStart(2, '0'); // Months are zero-indexed
  const day = dt.getUTCDate().toString().padStart(2, '0');

  let hours = dt.getUTCHours();
  const minutes = dt.getUTCMinutes().toString().padStart(2, '0');
  const period = hours >= 12 ? 'PM' : 'AM';
  
  // Convert 24-hour to 12-hour format
  hours = hours % 12 || 12;
  
  // Combine and return the final formatted string
  return `${dayOfWeek} ${month}/${day} ${hours}:${minutes}${period}`;
}
  
---
<!-- START Navbar -->
<nav>
  <ul>
    <li><h1>SF Events</h1></li>
  </ul>
  <ul>
    <li><a href="/api/luma" role="button" class="secondary" style="width: 100%;">Scraping UI</a></li>
  </ul>
</nav>
<br />
<!-- END Navbar -->
<!-- START Events Table -->
<table class="striped">
  <thead data-theme="dark">
    <tr>
      <th scope="col">Name</th>
      <th scope="col" style="width: 150px;">Date</th>
      <th scope="col">Food</th>
      <th scope="col">Coding</th>
      <th scope="col">Prizes</th>
      <th scope="col">Action</th>
    </tr>
  </thead>
  <tbody>
    {events.map((event) => 
    <tr>
      <th scope="row"><a href={"https://lu.ma/"+event.EventID}>{event.EventName}</a></th>
      <td>{format_date(event.EventDatetime)}</td>
      <td id={"food_report_"+event.EventID}>{event.EventFoodReport}</td>
      <td id={"coding_report_"+event.EventID}>{event.EventCodingReport}</td>
      <td id={"prizes_report_"+event.EventID}>{event.EventPrizesReport}</td>
      <td>
      { event.EventPrizesReport == "TBD" ?
        <button 
          hx-get={"/api/ai/"+(event.EventFoodReport == "TBD" ? "food" : event.EventCodingReport == "TBD" ? "coding" : "prizes")+"_report/"+event.EventID}
          class={event.EventFoodReport != "TBD" ? event.EventCodingReport != "TBD" ? "secondary" : "contrast" : ""}
          hx-swap="outerHTML"
        >AI</button> :
        <button disabled>AI</button>
      }
      </td>
    </tr>
    )}
  </tbody>
</table>
<!-- END Events Table -->
<pre><code>{JSON.stringify(results)}</code></pre>
