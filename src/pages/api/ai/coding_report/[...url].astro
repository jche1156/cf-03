---
// Render this page as an HTML fragment
export const partial = true;

import OpenAI from "openai";
import { zodResponseFormat } from "openai/helpers/zod";
import { z } from "zod";
type D1Result = import("@cloudflare/workers-types").D1Result;

const {url} = Astro.params;
const myDB = Astro.locals.runtime.env.DB;

const client = new OpenAI({
  apiKey: import.meta.env.OPENAI_API_KEY
});

const CodingReport = z.object({
  eventHasCoding: z.boolean(),
  eventCodingReport: z.string(),
});

export interface LumaEventResult {
  EventID: string;
  EventDescription: string;
  EventCodingReport: string;
}

const result: D1Result = await myDB
  .prepare("SELECT EventID, EventDescription, EventCodingReport FROM Events WHERE EventID = ?")
  .bind(url)
  .all();

let codingReport = "TBD", eventDescription = "";

if (result.results != null) {
  const events: LumaEventResult[] = result.results as LumaEventResult[];
  if (events.length > 0) {
    eventDescription = events[0].EventDescription;
    codingReport = events[0].EventCodingReport;
  }
}

// foodReport == "TBD" && 
if (eventDescription != "") {
  const completion = await client.beta.chat.completions.parse({
    model: "gpt-4o",
    messages: [
      { role: "system", content: "Generate a report by helping analyze descriptions for pertinent information. If information is lacking, try to infer from details. If too little information is given, you can say that about the data. Be very brief." },
      { role: "user", content: "Help me figure out what type of coding or tech at this event, or if it doesn't feature it at all according to the description. Also, if there's coding/progamming, mention that in the boolean you'll return. Keep your answer brief, at most 1 short sentence. For example, 'Coding Unlikely', 'Meetup Only', 'Networking Event' is fine.\n```\n"+eventDescription+"\n```\n" },
    ],
    response_format: zodResponseFormat(CodingReport, "report"),
  });

  let report = {
    eventHasCoding: false,
    eventCodingReport: "TBD",
  };
  
  if (completion.choices[0].message.parsed != null) {
    report = completion.choices[0].message.parsed;
  }
  
  codingReport = report.eventCodingReport;
  await myDB
    .prepare("UPDATE Events SET EventCodingReport = ?1, EventHasCoding = ?2 WHERE EventID = ?3")
    .bind(codingReport, report.eventHasCoding, url)
    .run();
}
---
<td id={"coding_report_"+url} hx-swap-oob="true">{codingReport}</td>
<button 
  hx-get={"/api/ai/prizes_report/"+url}
  class="secondary"
  hx-swap="outerHTML"
>
  AI
</button>

